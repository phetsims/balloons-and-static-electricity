/* eslint-disable */
import asyncLoader from '../../phet-core/js/asyncLoader.js';
import base64SoundToByteArray from '../../tambo/js/base64SoundToByteArray.js';
import WrappedAudioBuffer from '../../tambo/js/WrappedAudioBuffer.js';
import phetAudioContext from '../../tambo/js/phetAudioContext.js';

const soundURI = 'data:audio/mpeg;base64,//swxAAABiQxYtTzADE6kCzrNKACIAXUwPIlKa+VOQcNQIYZEVPoeh6jZwggQIEEAQBMHwffTyjonB84IAx+H+j/+/yn9AAH8CEEAYDAYDAADgqY/d7cIQ5h4qsBmEDSxZmZAiX0DtTUCKA24A0Ar4LIrCK/BuIR6S/5EPhWIRV/8VSIfD4FfzoNCU7+oGhK7/1hIGlNAApfi3CB//syxAOABmgpS72zADDYBSf1HGwegDwdLoaXNFmQp6luVQGBE5u3mJNTIS5K1ZM7TvAqNNf69/WmNEo///o///oKIAKe0kjCUAP2rNTLpDgwYFAEY7GgaADbgcaojNNZNAs/N1jrTYXM0Znt2W/+M///cnXFfvoVCZATg0ssYUAy4fGGvvwgmkS2DJ4wBAyR7oRMQEaAkbzR7Xk43v/7MsQSgAaMK0Ol7SMw1wUjCb7pAqvSwcrcxrBehK///1q/pUAAEBl87sqiLchwBEaoaK0GWFJrUCbZuyA1tAcIIaiwpULnRSpd+y78le3fdt/61f0+m2tH9CoABHP6qADkztuIqiUnCCRMsxTJgdbUE0AtchjvUlHsu+n1/p+lOn1/+gQEhFwNhpEQAlfSSspjTAg5ihRWrUz7Kej/+zLEIQAFKB8tJr9ikKED5rR8PJbXe36v7zUVita+Huj9H/6qAIAD00TbIEARe9C61Bh0sONVYKqop7O/fVuT0XK/3aGf//6Ei1IKy2uRMgB67AdWQpMwWtXbSIgwQo6JFmLAPt+t9daP9NUWJJ2WNNoEQOJyijDYDecg2oNseeZvK9HZ6P9yP/9RaxH/8kBWSJLAw0iYHpNiANa0//swxDwABIQbKaUvJCCIAue0EbBOtUtzhnrd/jv+zt/Rt/5D+WUasiwAF6DjqeoWcpb/1M2N9VW7////7/6BgIIAAJKoBOm2rpGAVq+NAis+rKyfuQNX9r/pFQ1ipV1V+497Ni3e3e6qRczoQnKAIAymVElATOwhRTqRE3aV7mv1P/2+RlZb/uu//+TqW+tYhAAQwOUFQQOgrKCB//syxFwABGwZNaCF4nB4gub0EBwGgg4ttN9QqysUFv/WKi2LN/1N1CtMQU1FMy45OS41VVVMQU1FMy45OS41VVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVf/7MsR/AAMQFzOAnCYwuI5iKISUwFVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVX/+zLEn4AD6BcZoIBEII6El+QxjFRVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV//swxLwDwAABpAAAACAAADSAAAAEVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV';
const soundByteArray = base64SoundToByteArray( phetAudioContext, soundURI );
const unlock = asyncLoader.createLock( soundURI );
const wrappedAudioBuffer = new WrappedAudioBuffer();
const onDecodeSuccess = decodedAudio => {
  wrappedAudioBuffer.audioBufferProperty.set( decodedAudio );
  unlock();
};
const onDecodeError = decodeError => {
  console.warn( 'decode of audio data failed, using stubbed sound, error: ' + decodeError );
  wrappedAudioBuffer.audioBufferProperty.set( phetAudioContext.createBuffer( 1, 0, phetAudioContext.sampleRate ) );
  unlock();
};
phetAudioContext.decodeAudioData( soundByteArray.buffer, onDecodeSuccess, onDecodeError );
export default wrappedAudioBuffer;